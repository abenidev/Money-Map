// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/account.dart';
import 'core/models/category.dart';
import 'core/models/transaction.dart';
import 'core/models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3418106146812973871),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(11, 4608715302401868430),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6697806377960914965),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5201841301854709143),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3111094392983452394),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6535318823682672350),
            name: 'profilePic',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2154166058121779642),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8230753628835862739),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4318432535079560026),
            name: 'budgetCycle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 401804345537492309),
            name: 'needsPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 71765311526641847),
            name: 'wantsPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3630298498481121574),
            name: 'savingsPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4608715302401868430),
            name: 'tithePercentage',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'accounts', srcEntity: 'Account', srcField: 'user')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2658855709596916534),
      name: 'Account',
      lastPropertyId: const obx_int.IdUid(9, 805185011390087823),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4852170801278241072),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4150410269983528397),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8738536959257771449),
            name: 'isDefault',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6925510193148370399),
            name: 'accountType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6307814032758525352),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4848330234307195823),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9021542675674244993),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3683633366337763889),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 805185011390087823),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7348238769717520346),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'transactions', srcEntity: 'Transaction', srcField: 'account')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 885506330367083336),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(5, 473926399118509080),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4054988949544800267),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3611487511213033372),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9148605824592304359),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5699957028260544790),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 473926399118509080),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'transactions',
            srcEntity: 'Transaction',
            srcField: 'category')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3828346058160973516),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(8, 7091711580254900136),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5214966257979984785),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1397893492406729825),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5124123274508277558),
            name: 'transactionType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2819072256686865054),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 745720268621348492),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6965220737937897173),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3142214468801493137),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8381996950681623105),
            relationTarget: 'Account'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7091711580254900136),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 8723473141310663705),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 3828346058160973516),
      lastIndexId: const obx_int.IdUid(3, 8723473141310663705),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              obx_int.RelInfo<Account>.toOneBacklink(
                      9, object.id, (Account srcObject) => srcObject.user):
                  object.accounts
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final currencyOffset = fbb.writeString(object.currency);
          final profilePicOffset = fbb.writeString(object.profilePic);
          final budgetCycleOffset = fbb.writeString(object.budgetCycle);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, currencyOffset);
          fbb.addOffset(3, profilePicOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(6, budgetCycleOffset);
          fbb.addFloat64(7, object.needsPercentage);
          fbb.addFloat64(8, object.wantsPercentage);
          fbb.addFloat64(9, object.savingsPercentage);
          fbb.addFloat64(10, object.tithePercentage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final profilePicParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final budgetCycleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final needsPercentageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final wantsPercentageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final savingsPercentageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final tithePercentageParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final object = User(
              id: idParam,
              name: nameParam,
              currency: currencyParam,
              profilePic: profilePicParam,
              budgetCycle: budgetCycleParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              needsPercentage: needsPercentageParam,
              wantsPercentage: wantsPercentageParam,
              savingsPercentage: savingsPercentageParam,
              tithePercentage: tithePercentageParam);
          obx_int.InternalToManyAccess.setRelInfo<User>(
              object.accounts,
              store,
              obx_int.RelInfo<Account>.toOneBacklink(
                  9, object.id, (Account srcObject) => srcObject.user));
          return object;
        }),
    Account: obx_int.EntityDefinition<Account>(
        model: _entities[1],
        toOneRelations: (Account object) => [object.user],
        toManyRelations: (Account object) => {
              obx_int.RelInfo<Transaction>.toOneBacklink(7, object.id,
                      (Transaction srcObject) => srcObject.account):
                  object.transactions
            },
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final accountTypeOffset = fbb.writeString(object.accountType);
          final currencyOffset = fbb.writeString(object.currency);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isDefault);
          fbb.addOffset(3, accountTypeOffset);
          fbb.addFloat64(4, object.balance);
          fbb.addOffset(5, currencyOffset);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isDefaultParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final accountTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final balanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = Account(
              id: idParam,
              name: nameParam,
              isDefault: isDefaultParam,
              accountType: accountTypeParam,
              balance: balanceParam,
              currency: currencyParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.user.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Account>(
              object.transactions,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(
                  7, object.id, (Transaction srcObject) => srcObject.account));
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              obx_int.RelInfo<Transaction>.toOneBacklink(8, object.id,
                      (Transaction srcObject) => srcObject.category):
                  object.transactions
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = Category(
              id: idParam,
              name: nameParam,
              type: typeParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<Category>(
              object.transactions,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(
                  8, object.id, (Transaction srcObject) => srcObject.category));
          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[3],
        toOneRelations: (Transaction object) =>
            [object.account, object.category],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final transactionTypeOffset = fbb.writeString(object.transactionType);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, transactionTypeOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.account.targetId);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final transactionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = Transaction(
              id: idParam,
              amount: amountParam,
              description: descriptionParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              transactionType: transactionTypeParam);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.account.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.currency].
  static final currency =
      obx.QueryStringProperty<User>(_entities[0].properties[2]);

  /// See [User.profilePic].
  static final profilePic =
      obx.QueryStringProperty<User>(_entities[0].properties[3]);

  /// See [User.createdAt].
  static final createdAt =
      obx.QueryDateProperty<User>(_entities[0].properties[4]);

  /// See [User.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<User>(_entities[0].properties[5]);

  /// See [User.budgetCycle].
  static final budgetCycle =
      obx.QueryStringProperty<User>(_entities[0].properties[6]);

  /// See [User.needsPercentage].
  static final needsPercentage =
      obx.QueryDoubleProperty<User>(_entities[0].properties[7]);

  /// See [User.wantsPercentage].
  static final wantsPercentage =
      obx.QueryDoubleProperty<User>(_entities[0].properties[8]);

  /// See [User.savingsPercentage].
  static final savingsPercentage =
      obx.QueryDoubleProperty<User>(_entities[0].properties[9]);

  /// See [User.tithePercentage].
  static final tithePercentage =
      obx.QueryDoubleProperty<User>(_entities[0].properties[10]);

  /// see [User.accounts]
  static final accounts = obx.QueryBacklinkToMany<Account, User>(Account_.user);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// See [Account.id].
  static final id =
      obx.QueryIntegerProperty<Account>(_entities[1].properties[0]);

  /// See [Account.name].
  static final name =
      obx.QueryStringProperty<Account>(_entities[1].properties[1]);

  /// See [Account.isDefault].
  static final isDefault =
      obx.QueryBooleanProperty<Account>(_entities[1].properties[2]);

  /// See [Account.accountType].
  static final accountType =
      obx.QueryStringProperty<Account>(_entities[1].properties[3]);

  /// See [Account.balance].
  static final balance =
      obx.QueryDoubleProperty<Account>(_entities[1].properties[4]);

  /// See [Account.currency].
  static final currency =
      obx.QueryStringProperty<Account>(_entities[1].properties[5]);

  /// See [Account.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Account>(_entities[1].properties[6]);

  /// See [Account.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Account>(_entities[1].properties[7]);

  /// See [Account.user].
  static final user =
      obx.QueryRelationToOne<Account, User>(_entities[1].properties[8]);

  /// see [Account.transactions]
  static final transactions =
      obx.QueryBacklinkToMany<Transaction, Account>(Transaction_.account);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);

  /// See [Category.type].
  static final type =
      obx.QueryStringProperty<Category>(_entities[2].properties[2]);

  /// See [Category.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Category>(_entities[2].properties[3]);

  /// See [Category.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Category>(_entities[2].properties[4]);

  /// see [Category.transactions]
  static final transactions =
      obx.QueryBacklinkToMany<Transaction, Category>(Transaction_.category);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[3].properties[0]);

  /// See [Transaction.amount].
  static final amount =
      obx.QueryDoubleProperty<Transaction>(_entities[3].properties[1]);

  /// See [Transaction.transactionType].
  static final transactionType =
      obx.QueryStringProperty<Transaction>(_entities[3].properties[2]);

  /// See [Transaction.description].
  static final description =
      obx.QueryStringProperty<Transaction>(_entities[3].properties[3]);

  /// See [Transaction.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Transaction>(_entities[3].properties[4]);

  /// See [Transaction.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Transaction>(_entities[3].properties[5]);

  /// See [Transaction.account].
  static final account =
      obx.QueryRelationToOne<Transaction, Account>(_entities[3].properties[6]);

  /// See [Transaction.category].
  static final category =
      obx.QueryRelationToOne<Transaction, Category>(_entities[3].properties[7]);
}
